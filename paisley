#!/usr/bin/env lua
V2 = nil --filename
V3 = {} --non-builtin commands

local PRINT_BYTECODE = false
local PRETTY_PRINT = false
LANGUAGE_SERVER = false
SUPPRESS_AST_ERRORS = false
PRINT_AST = false
AST_AFTER_SEMANTIC = false

local ENDED = false

--Override default "error" behavior; just print the error, not a stack trace.
local old_error = error
function error(text)
	print(text)
	old_error()
end

local function script_real_path()
	local path = arg[0]
	local windows = package.config:sub(1,1) == '\\'

	if windows then
		local ffi = require("ffi")
        ffi.cdef[[
            typedef unsigned long DWORD;
            typedef char CHAR;
            typedef DWORD ( __stdcall *GetFullPathNameA_t )(const CHAR*, DWORD, CHAR*, CHAR**);
        ]]
        local kernel32 = ffi.load("kernel32")
        local MAX_PATH = 260
        local buf = ffi.new("char[?]", MAX_PATH)
        local getFullPathName = ffi.cast("GetFullPathNameA_t", kernel32.GetFullPathNameA)
        local length = getFullPathName(path, MAX_PATH, buf, nil)
        if length == 0 then
            return '' -- Failed to get path
        else
            return ffi.string(buf, length)
        end
	else
		-- If on Linux, resolve symbolic links
        local resolvedPath = io.popen("readlink -f " .. path):read("*a")
        if resolvedPath then
            return resolvedPath:gsub("^%s*(.-)%s*$", "%1") -- Trim whitespace
        else
            return '' -- Failed to get path
        end
	end
end

local dir = script_real_path():match('(.*[/\\])')
local lfs_installed, lfs = pcall(require, 'lfs')
if dir == nil then dir = '' end

for i, v in ipairs(arg) do
	if v:sub(1,1) == '-' and v ~= '-' then
		if v:sub(1,2) == '-c' then
			table.insert(V3, v:sub(3,#v))
		elseif v == '--help' or v == '-h' then
			print('Paisley ' .. io.open( dir .. 'version.txt'):read() )
			print('\n' .. io.open( dir .. 'helptext.txt'):read('*all'):gsub('[\r\n]+$', ''):gsub('^[\r\n]+', '') )
			ENDED = true
		elseif v == '--version' or v == '-V' then
			print('Paisley ' .. io.open( dir .. 'version.txt'):read() )
			ENDED = true
		elseif v == '--bytecode' or v == '-b' then
			PRINT_BYTECODE = true
		elseif v == '--pretty' or v == '-p' then
			PRETTY_PRINT = true
		elseif v == '--language-server' then
			LANGUAGE_SERVER = true
		elseif v == '--no-ast-errors' then
			SUPPRESS_AST_ERRORS = true
		elseif v == '--ast' then
			PRINT_AST = true
		elseif v == '--ast-sem' then
			PRINT_AST = true
			AST_AFTER_SEMANTIC = true
		else
			error('Unknown flag `'..v..'`. Try running with `--help` to see all options.')
		end
	else
		V2 = v --filename
	end
end

if lfs_installed and dir ~= nil then
	lfs.chdir(dir)
end

if not ENDED then
	if V2 == nil then
		error('Error: No input file given. Use `-` to read from stdin, or re-run with `--help` to see all options.')
	end

	if V2 == '-' then
		V2 = nil
		V1 = io.read('*all') --program text
	else
		--Read from file
		local file = io.open(V2)
		if file then
			V1 = file:read('*all')
		else
			error('Error: Cannot open file `'..V2..'`.')
		end
	end

	function output() end

	require "src.compiler"

	if PRINT_AST then ENDED = true end

	if PRINT_BYTECODE then
		if PRETTY_PRINT then
			print('[')
			for i = 1, #bytecode do
				local comma = ''
				if i < #bytecode then comma = ',' end
				print('  ' .. json.stringify(bytecode[i]) .. comma)
			end
			print(']')
		else
			print(json.stringify(bytecode))
		end

		ENDED = true
	end
end

--Run the generated bytecode
if not ENDED and not LANGUAGE_SERVER and bytecode ~= nil then
	local tmp = ALLOWED_COMMANDS

	V1 = json.stringify(bytecode)
	V4 = os.time()
	V5 = nil

	require "src.runtime"
	ALLOWED_COMMANDS = tmp

	local socket_installed, socket = pcall(require, 'socket')

	local line_no = 0
	function output(value, port)
		if port == 1 then
			--continue program
			os.execute('sleep 0.01') --emulate behavior in Plasma where program execution pauses periodicaly to avoid lag.
		elseif port == 2 then
			--run a non-builtin command (currently not supported outside of Plasma)
			error('Error on line '.. line_no .. ': Cannot run program `' .. std.str(value) .. '`')
		elseif port == 3 then
			ENDED = true --program successfully completed
		elseif port == 4 then
			--delay execution for an amount of time
			os.execute('sleep ' .. value)
			V5 = nil
		elseif port == 5 then
			--get current time (seconds since midnight)
			local date = os.date('*t', os.time())
			local sec_since_midnight = date.hour*3600 + date.min*60 + date.sec

			if socket_installed then
				sec_since_midnight = sec_since_midnight + (math.floor(socket.gettime() * 1000) % 1000 / 1000)
			end

			V5 = sec_since_midnight --command return value
		elseif port == 6 then
			if value == 2 then
				--get system date (day, month, year)
				local date = os.date('*t', os.time())
				V5 = {date.day, date.month, date.year} --command return value
			elseif value == 1 then
				--get system time (seconds since midnight)
				local date = os.date('*t', os.time())
				local sec_since_midnight = date.hour*3600 + date.min*60 + date.sec

				if socket_installed then
					sec_since_midnight = sec_since_midnight + (math.floor(socket.gettime() * 1000) % 1000 / 1000)
				end

				V5 = sec_since_midnight --command return value
			end
		elseif port == 7 then
			--Print text or error
			table.remove(value, 1)
			print(std.str(value))
			io.flush()
			V5 = nil
		elseif port == 8 then
			--value is current line number
		else
			print(port, json.stringify(value))
		end
	end

	function output_array(value, port) output(value, port) end

	while not ENDED do
		RUN()
	end
end
