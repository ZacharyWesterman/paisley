#!/usr/bin/env lua
V2 = nil --filename
V3 = {}  --non-builtin commands

local PRINT_BYTECODE = false
local PRETTY_PRINT = false
local ZLIB_COMPRESS = false
local DRY_RUN = false
local INTROSPECTION = false
local INTROSPECT_CMDS = {}
local INTROSPECT_FUNCS = {}
local INTROSPECT_FUNCLIST = false
local INTROSPECT_CMDLIST = false
local STANDALONE_OUTPUT = false
REPL = false
LANGUAGE_SERVER = false
RESTRICT_TO_PLASMA_BUILD = false
SUPPRESS_AST_ERRORS = false
PRINT_TOKENS = false
PRINT_AST = false
AST_AFTER_SEMANTIC = false
WORKING_DIR = ''
LSP_FILENAME = ''
KEEP_DEAD_CODE = false
NO_SHORTCUT = false

local ENDED = false

local OUTPUT_FILE = nil


--Override default "error" behavior; just print the error, not a stack trace.
function error(text)
	if text then print(text) end
	os.exit(1)
end

local function script_real_path()
	local path = arg[0]
	local windows = package.config:sub(1, 1) == '\\'

	if windows then
		local ffi_installed, ffi = pcall(require, 'ffi')

		if not ffi_installed then return '' end

		ffi.cdef [[
            typedef unsigned long DWORD;
            typedef char CHAR;
            typedef DWORD ( __stdcall *GetFullPathNameA_t )(const CHAR*, DWORD, CHAR*, CHAR**);
        ]]
		local kernel32 = ffi.load("kernel32")
		local MAX_PATH = 260
		local buf = ffi.new("char[?]", MAX_PATH)
		local getFullPathName = ffi.cast("GetFullPathNameA_t", kernel32.GetFullPathNameA)
		local length = getFullPathName(path, MAX_PATH, buf, nil)
		if length == 0 then
			return '' -- Failed to get path
		else
			return ffi.string(buf, length)
		end
	else
		-- If on Linux, resolve symbolic links
		local resolvedPath = io.popen("readlink -f " .. path):read("*a")
		if resolvedPath then
			return resolvedPath:gsub("^%s*(.-)%s*$", "%1") -- Trim whitespace
		else
			return ''                             -- Failed to get path
		end
	end
end

---@param text string
local function is_zlib_compressed(text)
	local header = text:sub(1, 2)

	if #header < 2 then return false end

	-- Convert the two bytes to integer values
	local byte1, byte2 = header:byte(1, 2)

	-- Check the zlib header
	-- The first byte (CMF - Compression Method and Flags)
	-- The second byte (FLG - Additional Flags)
	return (byte1 == 0x78) and (byte2 == 0x01 or byte2 == 0x9C or byte2 == 0xDA)
end

--@param text string
local function is_paisley_bytecode(text)
	if text:sub(1, 2) ~= '[[' or text:sub(#text - 1, #text) ~= ']]' then return false end
	return json.verify(text)
end

local dir = script_real_path():match('(.*[/\\])')
if dir == nil then dir = '' end

function STDLIB(filename)
	if dir == nil then return nil, filename end

	local fname = dir .. 'stdlib/' .. filename:gsub('%.', '/') .. '.paisley'
	return io.open(fname), fname
end

local lfs_installed, lfs = pcall(require, 'lfs')
local zlib_installed, zlib = pcall(require, 'zlib')

local VERSION = --[[build-replace=version.txt]] io.open(dir .. 'version.txt'):read() --[[/build-replace]]
local HELPTEXT = --[[build-replace=helptext.txt]] io.open(dir .. 'helptext.txt'):read('*all'):gsub('[\r\n]+$', ''):gsub(
	'^[\r\n]+', '') --[[/build-replace]]

local old_working_dir = nil
if lfs_installed and dir ~= nil then
	old_working_dir = lfs.currentdir()
	WORKING_DIR = old_working_dir
	lfs.chdir(dir)
end

require 'src.shared.json'
require 'src.shared.stdlib'

for i, v in ipairs(arg) do
	if v:sub(1, 1) == '-' and v ~= '-' then
		if v:sub(1, 2) == '-c' then
			table.insert(V3, v:sub(3, #v))
		elseif v == '--help' or v == '-h' then
			print('Paisley ' .. VERSION)
			print('\n' .. HELPTEXT)
			ENDED = true
		elseif v == '--version' or v == '-V' then
			print('Paisley ' .. VERSION)
			ENDED = true
		elseif v == '--bytecode' or v == '-b' then
			PRINT_BYTECODE = true
			PRETTY_PRINT = false
			ZLIB_COMPRESS = false
		elseif v == '--standalone' or v == '-s' then
			STANDALONE_OUTPUT = true
			PRINT_BYTECODE = true
			PRETTY_PRINT = false
			ZLIB_COMPRESS = false
		elseif v == '--pretty' or v == '-p' then
			PRINT_BYTECODE = true
			PRETTY_PRINT = true
			ZLIB_COMPRESS = false
		elseif v == '--compress' or v == '-z' then
			PRINT_BYTECODE = true
			PRETTY_PRINT = false
			ZLIB_COMPRESS = true
		elseif v == '--dry-run' then
			DRY_RUN = true
		elseif v == '--language-server' then
			LANGUAGE_SERVER = true
		elseif v == '--plasma' then
			RESTRICT_TO_PLASMA_BUILD = true
		elseif v == '--no-ast-errors' then
			SUPPRESS_AST_ERRORS = true
		elseif v == '--tokens' then
			PRINT_TOKENS = true
		elseif v == '--ast' then
			PRINT_AST = true
		elseif v == '--ast-sem' then
			PRINT_AST = true
			AST_AFTER_SEMANTIC = true
		elseif v == '--introspect' then
			INTROSPECTION = true
		elseif v == '--functions' then
			INTROSPECT_FUNCLIST = true
		elseif v == '--commands' then
			INTROSPECT_CMDLIST = true
		elseif v:sub(1, 3) == '-if' then
			table.insert(INTROSPECT_FUNCS, v:sub(4, #v))
		elseif v:sub(1, 3) == '-ic' then
			table.insert(INTROSPECT_CMDS, v:sub(4, #v))
		elseif v == '--repl' or v == '-r' then
			REPL = true
		elseif v:sub(1, 8) == '--stdin=' then
			LSP_FILENAME = v:sub(9, #v)
		elseif v == '--no-prune-dead-code' then
			KEEP_DEAD_CODE = true
		elseif v == '--no-shortcut' then
			NO_SHORTCUT = true
		else
			error('Unknown flag `' .. v .. '`. Try running with `--help` to see all options.')
		end
	elseif V2 then
		OUTPUT_FILE = v
		PRINT_BYTECODE = true
		if zlib_installed then
			ZLIB_COMPRESS = true
		else
			print('Warning: zlib dependency is not installed, so bytecode output will not be compressed.')
		end
	else
		V2 = v --input filename
	end
end

--If we're printing introspection data, ignore any other flags or inputs, and just print info about the Paisley language itself.
if INTROSPECTION then
	local function text_table(data)
		local widths, text = {}, ''

		--Calculate the width of each column
		for i, row in ipairs(data) do
			for k, cell in ipairs(row) do
				if widths[k] == nil then widths[k] = 0 end
				widths[k] = math.max(widths[k], #std.str(cell))
			end
		end

		local function delim()
			local text = '+'
			for i = 1, #widths do
				text = text .. ('-'):rep(widths[i] + 2) .. '+'
			end

			return text
		end

		--Generate text
		for i = 1, #data do
			if i > 2 then text = text .. '|' else text = text .. delim() .. '\n|' end
			for k = 1, #data[i] do
				text = text .. ' ' .. std.str(data[i][k]) .. (' '):rep(widths[k] - #std.str(data[i][k])) .. ' |'
			end
			text = text .. '\n'
		end
		text = text .. delim()

		return text
	end


	ALLOWED_COMMANDS = V3
	require 'src.compiler.type_signature'
	require 'src.shared.builtin_commands'

	if INTROSPECT_CMDLIST then
		--Just list the commands
		for key, val in pairs(BUILTIN_COMMANDS) do
			print(key)
		end
		for key, val in pairs(ALLOWED_COMMANDS) do
			print(key)
		end
	elseif #INTROSPECT_CMDS > 0 then
		for i = 1, #INTROSPECT_CMDS do
			local key = INTROSPECT_CMDS[i]
			if key == 'ALL' then
				INTROSPECT_CMDS = {}
				for k, v in pairs(BUILTIN_COMMANDS) do table.insert(INTROSPECT_CMDS, k) end
				for k, v in pairs(ALLOWED_COMMANDS) do table.insert(INTROSPECT_CMDS, k) end
				break
			end
			if not BUILTIN_COMMANDS[key] and not ALLOWED_COMMANDS[key] then
				error('ERROR: `' .. key .. '` is not a built-in or user-defined command.')
			end
		end

		for i = 1, #INTROSPECT_CMDS do
			local key = INTROSPECT_CMDS[i]
			print(key)
			if BUILTIN_COMMANDS[key] then
				print('  Returns: ' .. TYPE_TEXT(BUILTIN_COMMANDS[key]))
			else
				print(
					'  Returns: ' .. TYPE_TEXT(ALLOWED_COMMANDS[key]))
			end
			if BUILTIN_COMMANDS[key] then
				print('  Desc: ' .. CMD_DESCRIPTION[key])
			else
				print(
					'  Desc: User-defined command.')
			end
		end
	elseif not INTROSPECT_FUNCLIST and #INTROSPECT_FUNCS == 0 then
		--Generate table of commands
		local t = {}
		table.insert(t, { 'COMMAND', 'RETURN TYPE' })
		for key, val in pairs(BUILTIN_COMMANDS) do
			---@diagnostic disable-next-line
			table.insert(t, { key, TYPE_TEXT(val) })
		end
		for key, val in pairs(ALLOWED_COMMANDS) do
			table.insert(t, { key, TYPE_TEXT(val) })
		end

		print('COMMAND LIST:')
		print(text_table(t))
	end

	require 'src.compiler.tokens'
	require 'src.compiler.semantics'
	local funcs = {}
	for key, _ in pairs(BUILTIN_FUNCS) do table.insert(funcs, key) end
	table.sort(funcs)

	if INTROSPECT_FUNCLIST then
		--Just list the functions
		for i = 1, #funcs do
			print(funcs[i])
		end
	elseif #INTROSPECT_FUNCS > 0 then
		for i = 1, #INTROSPECT_FUNCS do
			local key = INTROSPECT_FUNCS[i]
			if key == 'ALL' then
				INTROSPECT_FUNCS = funcs
				break
			end

			if not BUILTIN_FUNCS[key] then
				error('ERROR: `' .. key .. '` is not a built-in function.')
			end
		end

		for i = 1, #INTROSPECT_FUNCS do
			local key = INTROSPECT_FUNCS[i]
			local funcsig = '???'
			if key == 'reduce' then
				funcsig = key .. '(' .. FUNCSIG(key) .. ') -> bool|number'
			elseif TYPESIG[key].out == 1 then
				--Return type is the same as 1st param
				local types = {}
				for i, k in ipairs(TYPESIG[key].valid) do
					table.insert(types, k[1])
				end
				funcsig = key .. '(' .. FUNCSIG(key) .. ') -> ' .. std.join(types, '|', TYPE_TEXT)
			else
				funcsig = key .. '(' .. FUNCSIG(key) .. ') -> ' .. TYPE_TEXT(TYPESIG[key].out)
			end
			print(key)
			print('  Signature: ' .. funcsig)
			print('  Desc: ' .. TYPESIG[key].description)
		end
	elseif not INTROSPECT_CMDLIST and #INTROSPECT_CMDS == 0 then
		--Generate table of functions
		local t = {}
		table.insert(t, { 'FUNCTION SIGNATURE' })
		for i = 1, #funcs do
			local key = funcs[i]
			if key == 'reduce' then
				table.insert(t, { key .. '(' .. FUNCSIG(key) .. ') -> bool|number' })
			elseif TYPESIG[key].out == 1 then
				--Return type is the same as 1st param
				local types = {}
				for i, k in ipairs(TYPESIG[key].valid) do
					table.insert(types, k[1])
				end
				table.insert(t, { key .. '(' .. FUNCSIG(key) .. ') -> ' .. std.join(types, '|', TYPE_TEXT) })
			else
				table.insert(t, { key .. '(' .. FUNCSIG(key) .. ') -> ' .. TYPE_TEXT(TYPESIG[key].out) })
			end
		end

		print('\nFUNCTION LIST:')
		print(text_table(t))
	end

	os.exit(0)
elseif INTROSPECT_CMDLIST or #INTROSPECT_CMDS > 0 or INTROSPECT_FUNCLIST or #INTROSPECT_FUNCS > 0 then
	error('ERROR: Introspection flags can only be used with `--introspect`.')
end


if ZLIB_COMPRESS and not zlib_installed then
	error('ERROR: zlib dependency is not installed. Cannot output compressed bytecode.')
end

if not ENDED and REPL then
	print('Paisley ' .. VERSION .. ' interactive REPL.')
	print('Type `stop` or press Ctrl-D to quit.')

	require "src.repl"
	ENDED = true
end

if not ENDED then
	if V2 == nil then
		error('Error: No input file given. Use `-` to read from stdin, or re-run with `--help` to see all options.')
	end

	if lfs_installed and dir ~= nil then lfs.chdir(old_working_dir) end

	if V2 == '-' then
		V2 = nil
		V1 = io.read('*all') --program text
	else
		--Read from file
		local file = io.open(V2, 'rb')

		if file then
			V1 = file:read('*all')
		else
			error('Error: Cannot open file `' .. V2 .. '`.')
		end
	end

	function output() end

	if lfs_installed and dir ~= nil then lfs.chdir(dir) end

	--Remove the shebang from the beginning of the input file if there is one.
	local m = V1:match('^#![^\n]*\n')
	if m then V1 = V1:sub(#m + 1) end

	--Check if we were given compressed bytecode
	if is_zlib_compressed(V1) then
		if not zlib_installed then
			error('Error: Cannot read compressed bytecode, zlib dependency is not installed.')
		end

		local inflated, err = zlib.inflate()(V1)
		if inflated then
			V1 = ''
			require "src.compiler" --include important stuff, but don't actually compile anything.

			--We'll instead be running raw bytecode.
			bytecode = json.parse(inflated)
		else
			error('Error during decompression: ' .. err)
		end
	elseif is_paisley_bytecode(V1) then
		local bc = V1
		V1 = ''
		require "src.compiler"
		bytecode = json.parse(bc)
	else
		require "src.compiler"
	end

	if PRINT_AST or PRINT_TOKENS then ENDED = true end

	if PRINT_BYTECODE then
		if old_working_dir then
			lfs.chdir(old_working_dir)
		end

		local text = ''
		if PRETTY_PRINT then
			text = text .. '[\n'
			for i = 1, #bytecode do
				local comma = ''
				if i < #bytecode then comma = ',\n' end
				text = text .. '  '
				if i < #bytecode then
					text = text .. json.stringify(bytecode[i]) .. ',\n'
				else
					text = text .. '[\n'
					for k = 1, #bytecode[i] do
						text = text .. '    ' .. json.stringify(bytecode[i][k])
						if k == #bytecode[i] then text = text .. '\n' else text = text .. ',\n' end
					end
					text = text .. '  ]'
				end
			end
			text = text .. '\n]'
		else
			text = json.stringify(bytecode)
		end

		if STANDALONE_OUTPUT then
			require "src.luac"
			text = LUAC_RUNTIME_TEXT(text)

			local PYTEXT = --[[build-replace=build.py]] io.open(dir .. 'build.py'):read('*all') --[[/build-replace]]
			PYTEXT = PYTEXT:gsub('\\', '\\\\'):gsub(
				'"', '\\"'):gsub('\n', '\\n'):gsub('%$', '\\$'):gsub('`', '\\`'):gsub('!', '\\!') --Make sure bash doesn't parse the string

			os.execute('python3 -c "' .. PYTEXT .. '" runtime --quiet --fetch-srlua')

			local runtime_lua = --[[build-replace=build/runtime.lua]] io.open('build/runtime.lua', 'r'):read('*all') --[[/build-replace]]
			if not runtime_lua then
				error('ERROR: Unable to load Paisley runtime! Exiting.')
			end

			--Do we want to add the shebang? No, don't think so since this will get compiled into exe.
			--text = '#!/usr/bin/env lua\n' .. text

			text = text .. runtime_lua .. LUAC_EXEC_TEXT()
		elseif ZLIB_COMPRESS then
			local deflated, err = zlib.deflate()(text, 'finish')
			if deflated then
				text = deflated
			else
				error('Error during compression: ' .. err)
			end
		end

		if OUTPUT_FILE then
			local fp = io.open(OUTPUT_FILE, 'wb')
			if not fp then
				error('Failed to write to file: ' .. OUTPUT_FILE)
			end

			if not STANDALONE_OUTPUT then
				text = '#!/usr/bin/env paisley\n' .. text

				fp:write(text)
				fp:close()
			else
				fp:close()

				--If standalone, compile lua source into bytecode
				--Strip out debug info to reduce file size
				text = LUAC_STRIP(LUAC_DUMP(text))

				--At this point, srlua exists and can be used.
				--So package this text into an executable
				local srluadir = '/tmp/paisley-build-srlua/build'
				local fp2 = io.open(srluadir .. '/luac.out', 'wb')
				if not fp2 then
					error(
						'ERROR: srlua is not installed, so the program cannot be compiled into a standalone executable. Exiting.')
				end
				fp2:write(text)
				fp2:close()

				os.execute(srluadir .. '/glue ' .. srluadir .. '/srlua ' .. srluadir .. '/luac.out ' .. OUTPUT_FILE)
				os.execute('chmod +x ' .. OUTPUT_FILE)
			end
		elseif ZLIB_COMPRESS and not STANDALONE_OUTPUT then
			io.write(text)
		else
			print(text)
		end

		ENDED = true
	end
end

if DRY_RUN then ENDED = true end

--Run the generated bytecode
if not ENDED and not LANGUAGE_SERVER and bytecode ~= nil then
	local tmp = ALLOWED_COMMANDS

	V1 = json.stringify(bytecode)
	V4 = os.time()
	V5 = nil

	require "src.runtime"
	ALLOWED_COMMANDS = tmp

	local socket_installed, socket = pcall(require, 'socket')

	local line_no = 0
	local CMD_LAST_RESULT = {
		['!'] = '', --stdout of command
		['?'] = nil, --result of execution
	}

	function output(value, port)
		if port == 1 then
			--continue program
			-- os.execute('sleep 0.01') --emulate behavior in Plasma where program execution pauses periodicaly to avoid lag.
		elseif port == 2 then
			--run a non-builtin command (currently not supported outside of Plasma)
			error('Error on line ' .. line_no .. ': Cannot run program `' .. std.str(value) .. '`')
		elseif port == 3 then
			ENDED = true --program successfully completed
		elseif port == 4 then
			--delay execution for an amount of time
			local exit_code = os.execute('sleep ' .. value)
			if exit_code ~= 0 and exit_code ~= true then ENDED = true end

			V5 = nil
		elseif port == 5 then
			--get current time (seconds since midnight)
			local date = os.date('*t', os.time())
			local sec_since_midnight = date.hour * 3600 + date.min * 60 + date.sec

			if socket_installed then
				sec_since_midnight = sec_since_midnight + (math.floor(socket.gettime() * 1000) % 1000 / 1000)
			end

			V5 = sec_since_midnight --command return value
		elseif port == 6 then
			if value == 2 then
				--get system date (day, month, year)
				local date = os.date('*t', os.time())
				V5 = { date.day, date.month, date.year } --command return value
			elseif value == 1 then
				--get system time (seconds since midnight)
				local date = os.date('*t', os.time())
				local sec_since_midnight = date.hour * 3600 + date.min * 60 + date.sec

				if socket_installed then
					sec_since_midnight = sec_since_midnight + (math.floor(socket.gettime() * 1000) % 1000 / 1000)
				end

				V5 = sec_since_midnight --command return value
			end
		elseif port == 7 then
			V5 = nil
			--Print text or error
			local cmd = value[1]
			table.remove(value, 1)
			local args = std.str(value)
			if cmd == 'stdout' then
				io.write(args)
			elseif cmd == 'stderr' then
				io.write(io.stderr, args)
			elseif cmd == 'stdin' then
				V5 = io.read('*l')
			else
				print(args)
			end
			io.flush()
		elseif port == 8 then
			--value is current line number
		elseif port == 9 then
			--Get the output of the last run unix command
			if value[2] == '' then
				V5 = CMD_LAST_RESULT[value[1]]
				return
			end

			--Run new unix command
			CMD_LAST_RESULT = {
				['!'] = '', --stdout of command
				['?'] = nil, --result of execution
			}

			local program = io.popen(value[2] .. ' 2>&1', 'r')
			if program then
				local line = program:read('*l')
				while line do
					if value[1] ~= '!' then print(line) end
					if #CMD_LAST_RESULT['!'] > 0 then line = '\n' .. line end
					CMD_LAST_RESULT['!'] = CMD_LAST_RESULT['!'] .. line

					line = program:read('*l')
				end

				CMD_LAST_RESULT['?'] = program:close()
			end

			V5 = CMD_LAST_RESULT[value[1]]
		else
			print(port, json.stringify(value))
		end
	end

	function output_array(value, port) output(value, port) end

	while not ENDED do
		RUN()
	end
end
