# @brief Truncate a string with ellipsis
# @param text string The string to truncate
# @param length number The max character length
# @param suffix string? The string to append if truncating. If not specified, "..." is used.
# @return string A string with the specified length, truncated and appended with the suffix if necessary.
# @export
subroutine string.truncate
	if {&@1 <= @2} then return {@1} end
	
	return {
		@1[1:(@2 - &(@3 if @3 else "..."))]
		(@3 if @3 else "...")
	}
end

# @brief Check if a string is numeric
# @param text string The string to test
# @return boolean True if the string only contains numeric characters.
# @export
subroutine string.is_numeric
	return {@1 like '^%d+$'}
end

# @brief Check if a string only contains letters
# @param text string The string to test
# @return boolean True if the string only contains alphabetic characters.
# @export
subroutine string.is_alpha
	return {@1 like '^%a+$'}
end

# @brief Check if a string is alphanumeric
# @param text string The string to test
# @return boolean True if the string only contains alphanumeric characters.
# @export
subroutine string.is_alphanumeric
	return {@1 like '^%w+$'}
end

# @brief URL-encode a string
# @param text string The string to encode
# @return string The URL-encoded string.
# @export
subroutine string.urlencode
	define {
		!entities[(
		'%' => '%25',
		' ' => '%20',
		'!' => '%21',
		'"' => '%22',
		'#' => '%23',
		'$' => '%24',
		'&' => '%26',
		"'" => '%27',
		'(' => '%28',
		')' => '%29',
		'*' => '%2A',
		'+' => '%2B',
		',' => '%2C',
		'/' => '%2F',
		':' => '%3A',
		';' => '%3B',
		'<' => '%3C',
		'=' => '%3D',
		'>' => '%3E',
		'?' => '%3F',
		'@' => '%40',
		'[' => '%5B',
		'\\' => '%5C',
		']' => '%5D',
		'^' => '%5E',
		'`' => '%60',
		'{' => '%7B',
		'|' => '%7C',
		'}' => '%7D',
		'~' => '%7E',
		)]
	}

	let _url = {@1}
	for _key _value in {!entities.pairs()} do
		let _url = {_url.replace(_key, _value)}
	end
	delete _key _value
	return {_url}
end
