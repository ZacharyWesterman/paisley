#@export
subroutine numeral
	let n_ = {abs(@[1])}

	if {n_ = 0} then return zero end

	let nums_ = one two three four five six seven eight nine
	let rank_ = thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion

	let result_ = ''

	while {n_} do
		let ones_ = {n_ % 10}
		let tens_ = {n_ // 10 % 10}
		let hundreds_ = {n_ // 100 % 10}
		let thousands_ = {n_ // 1000 % 1000}

		let r_ = ''
		if {tens_ = 1} then
			let r_ = {('ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen')[ones_+1]}
		else
			if {ones_} then let r_ = {nums_[ones_]} end
			if {tens_} then
				if {r_} then let r_ = "-{r_}" end
				let r_ = {('twenty', 'thirty', 'fourty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety')[tens_-1] r_}
			end
		end

		if {hundreds_} then
			let r_ = {nums_[hundreds_] ' hundred' (' ' if r_ else '') r_}
		end

		if {thousands_} then
			let r_ = {' ' rank_[1] (' ' if r_ else '') r_}
		end

		let result_ = {r_ result_}

		let n_ = {n_ // 1000}
		let rank_ = {rank_.delete(1)}
	end

	return {('negative ' if @[1] < 0 else '') result_}
end

#@export
subroutine ordinal
	let r_ = ${gosub numeral {@[1]}}

	let _repl = {
		'twelve' => 'twelfth',
		'nine' => 'ninth',
		'eight' => 'eighth',
		'five' => 'fifth',
		'three' => 'third',
		'two' => 'second',
		'one' => 'first',
	}

	for k v in {pairs(_repl)} do
		if {r_[(&r_ - &k + 1)::] = v} then
			return {r_[1:(&r_ - &k)] v}
		end
	end

	if {r_[&r_] = 'y'} then
		return {r_[1:(&r_-1)] 'ieth'}
	end

	return {r_ 'th'}
end
