# @brief Convert a hex color code to RGB values
# @param hex string The hex color code (e.g., "#RRGGBB" or "RRGGBB")
# @return array[number] An array containing the RGB values [R, G, B]
# @export
subroutine color.hex_to_rgb
	let _color = {@1[(2 if @1[1] = '#' else 1)::]}
	
	if {&_color != 6 or _color not like '^[0-9a-fA-F]+$'} then
		error "Invalid hex color code: {@1}"
	end

	return { _color.from_base(16).bytes(3) }
end

# @brief Convert RGB values to a hex color code
# @param @ array[number] An array containing the RGB values [R, G, B]. RGB array may be passed as a single argument or as three separate arguments.
# @return string The hex color code in the format "#RRGGBB"
# @export
subroutine color.rgb_to_hex
	return "#{@.flatten().frombytes().to_base(16, 6)}"
end

#[[
@brief Blend two colors together
@param color1 array[number] The first color as an array of RGB values [R, G, B]
@param color2 array[number] The second color as an array of RGB values [R, G, B]
@param ratio number The blend ratio (0.0 to 1.0). 0.0 returns color1, 1.0 returns color2.
@return array[number] An array containing the blended RGB values [R, G, B]
@export
#]]
subroutine color.blend
	return {(@1[i] * (1 - @3.clamp(0, 1)) + @2[i] * @3.clamp(0, 1)).round() for i in 1:3}
end
