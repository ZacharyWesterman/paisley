#@export
#@brief Get the current date and time.
#@return object The current date and time.
subroutine datetime.now
	return {
		'date' => ${sysdate},
		'time' => ${systime},
	}
end

#@export
#@brief Format a datetime object as a string in ISO 8601 format.
#@param datetime object The input datetime object.
#@return string The formatted string.
subroutine datetime.isoformat
	return "{date(@[1].date)}T{time(@[1].time)}"
end

#@export
#@brief Parse a string in ISO 8601 format.
#@param str string The input string to parse.
#@return object The parsed date and time.
#@mutate _dt
subroutine datetime.fromiso
	let _dt = {@[1].split('T')}
	return {
		'date' => int(i) for i in _dt[1].split('-').reverse(),
		'time' => (int(i) for i in _dt[2].split(':')).timestamp(),
	}
end

#@export
#@brief Check if a string is in ISO 8601 format.
#@param str string The input string to check.
#@return boolean True if the string is in ISO 8601 format, false otherwise.
subroutine datetime.isiso
	return {@[1] like '%d%d%d%d%-%d%d%-%d%dT%d%d:%d%d:%d%d'}
end

#@export
#@brief Parse a duration string (e.g., "1h30m") into total seconds.
#@param duration string The duration string to parse.
#@return number The total duration in seconds.
subroutine datetime.duration
	error "Not implemented yet"
end
