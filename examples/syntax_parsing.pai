require syntax
require arg

# Get expression text from first argument.
let config = {
    'expression' => true, #Positional argument, required
}
let info = {
    'name' => 'paisley syntax_parsing.pai --',
    'description' => 'An example program that parses a simple arithmetic expression.',
}
let args = {\arg.parse(@, config, info)}

# Define the operator IDs.
#We're defining operator IDs with macros so that an invalid ID is a compile error.
#They don't have to be numbers, could be anything, but numbers are easy.
#Also, see how macros can auto-increment themselves! `![!+1]` 
define {![0]}
define {
    !number[![!+1]]
    !op_plus[![!+1]]
    !op_minus[![!+1]]
    !op_times[![!+1]]
    !op_divide[![!+1]]
    !lparen[![!+1]]
    !rparen[![!+1]]
}

#Define the scopes for the lexer.
#Most languages only have 1 lexical scope, but for context-sensitive lexers (like Bash), you might have more.
let scopes = {
    '_' => (
        ('[0-9]*%.[0-9]+', !number),
        ('[0-9]+', !number),
        ('%+', !op_plus),
        ('%-', !op_minus),
        ('%*', !op_times),
        ('/', !op_divide),
        ('%(', !lparen),
        ('%)', !rparen),
        ('%s+', !token_discard),
    ),
}

#Split the text into tokens.
#The lexer will return an array of objects, each with an 'id', 'span', and 'text' field.
let tokens = {\syntax.lex(scopes, args.expression)}

#Define the rules for the parser.
let rules = {
    'expr' => (
        ('expr', !op_plus, 'term',),
        ('expr', !op_minus, 'term',),
        ('term',),
    ),
    'term' => (
        ('term', !op_times, 'factor',),
        ('term', !op_divide, 'factor',),
        ('factor',),
    ),
    'factor' => (
        (!number,),
        (
            # This is a special rule that only keeps SOME of the child nodes.
            'rule' => (!lparen, 'expr', !rparen,),
            'keep' => (2,), #Keep the child node at index 2.

            #By default, if "keep" contains only 1 token index, the parser will discard the extra node in favor of the child node.
            #If you want to keep the extra node, you can set "nodiscard" to true.
        ),
    ),
}

#Parse the tokens into an AST.
let ast = {\syntax.parse(rules, tokens)}

#Now that we have a valid AST, we can evaluate it.
#For simplicity, we'll define a subroutine for each node type.

print {\evaluate(ast)}

subroutine evaluate
    if {@1.id in ('expr', 'term')} then
        match {@1.children[2].text} do
            if + then return {\evaluate(@1.children[1]) + \evaluate(@1.children[3])} end
            if - then return {\evaluate(@1.children[1]) - \evaluate(@1.children[3])} end
            if * then return {\evaluate(@1.children[1]) * \evaluate(@1.children[3])} end
            if / then return {\evaluate(@1.children[1]) / \evaluate(@1.children[3])} end
        else
            error "Unknown operator '{@1.children[3].text}'"
        end
    elif {@1.id = !number} then
        return {num(@1.text)}
    else
        error "Unknown node type '{@1.id}'"
    end
end
