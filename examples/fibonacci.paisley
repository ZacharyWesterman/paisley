#Calculate a bunch of numbers in the fibonacci sequence.
#See how the higher numbers take longer to calculate, but still do not cause lag spikes.
for n in {0:100} do
    gosub fibonacci
    print "fib({n}) = {fibonacci}"
end

#@input n:number The index of the Fibonacci sequence to calculate.
#@output result:number The respective Fibonacci number.
#@mutate __prev:number
subroutine fibonacci
    #Cache results, never recompute fibonacci numbers if we calculated it before
    if {__fibonacci exists} else let __fibonacci = {0,1} end
    if {__fibonacci[n+1] != null} then
        let fibonacci = {__fibonacci[n+1]}
        return
    end

    let __prev = {__fibonacci[#__fibonacci-1]}
    let fibonacci = {__fibonacci[#__fibonacci]}
    for i in {(#__fibonacci+1):(n+1)} do
        let fibonacci = {__prev + fibonacci}
        let __prev = {fibonacci - __prev}
        let __fibonacci{i} = {fibonacci}
    end
end
